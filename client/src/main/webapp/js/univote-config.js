/*
 * Copyright (c) 2012 Berner Fachhochschule, Switzerland.
 * Bern University of Applied Sciences, Engineering and Information Technology,
 * Research Institute for Security in the Information Society, E-Voting Group,
 * Biel, Switzerland.
 *
 * Project UniVote.
 *
 * Distributable under GPL license.
 * See terms of license at gnu.org.
 *
 */


(function(window) {

	function Config() {

		/**
		 * The urls of the certificate authority.
		 */
		this.URL_UNICERT_CERTIFICATE_AUTHORITY	= 'https://urd.bfh.ch/unicert-authentication/certificate-request/';
		this.URL_PARAMETERS		= 'https://urd.bfh.ch/voting-client2/parameters/';
		
		/**
		 * The url of the public board.
		 */
		this.URL_UNIBOARD_GET			= 'https://urd.bfh.ch/uniboard/messages/query';//'http://urd.bfh.ch:9080/bfh-restservice-mock/messages/query';
		this.URL_UNIBOARD_POST			= 'https://urd.bfh.ch/uniboard/messages/post';//'http://urd.bfh.ch:9080/bfh-restservice-mock/messages/post';

		/**
		 * The home site.
		 */
		this.HOME_SITE				= 'index.xhtml';

		/**
		 * Sign used for concatenation
		 */
		this.CONCAT_SEPARATOR			= "|";
		
		/**
		 * Pre- and postfix used for secret key padding. Important: As the padded
		 * secret key is converted into a bigInt only leemon's base64 charset can
		 * be used (0-9, A-Z, a-z, _ and =)
		 */
		this.PRIVATE_KEY_PREFIX			= "=====BEGIN_UNICERT_PRIVATE_KEY=====";
		this.PRIVATE_KEY_POSTFIX		= "=====END_UNICERT_PRIVATE_KEY=====";

		/**
		 * Pre- and postfix used for padding the encrypted secret key generated by UniCert
		 */
		this.ENC_PRIVATE_KEY_PREFIX		= "-----BEGIN ENCRYPTED UNICERT KEY-----";
		this.ENC_PRIVATE_KEY_POSTFIX		= "-----END ENCRYPTED UNICERT KEY-----";
		
		/**
		 * Size of prefix and postfix
                 * Used for the one-time-pad to encrypt secret key.
		 *
		 * => size of pre- and postfix = 411 < 512
		 */
		this.PRIVATE_KEY_ONE_TIME_PAD_PREPOSTFIX_SIZE = 512;
		
		/**
		 * LEGACY SUPPORT: UniVote 1
		 * Pre- and postfix used for padding the encrypted secret key generated by UniVote 1
		 */
		this.ENC_PRIVATE_KEY_PREFIX_UNIVOTE_1	= "-----BEGIN ENCRYPTED UNIVOTE VOTING KEY-----";
		this.ENC_PRIVATE_KEY_POSTFIX_UNIVOTE_1  = "-----END ENCRYPTED UNIVOTE VOTING KEY-----";

		/**
		 * LEGACY SUPPORT: UniVote 1
		 * Pre- and postfix used for secret key padding. Important: As the padded
		 * secret key is converted into a bigInt only leemon's base64 charset can
		 * be used (0-9, A-Z, a-z, _ and =)
		 */
		this.PRIVATE_KEY_PREFIX_UNIVOTE_1	= "=====BEGIN_UNIVOTE_PRIVATE_KEY=====";
		this.PRIVATE_KEY_POSTFIX_UNIVOTE_1	= "=====END_UNIVOTE_PRIVATE_KEY=====";

		/**
		 * LEGACY SUPPORT: UniVote 1
		 * Size of the one-time-pad to encrypt secret key.
		 *
		 * => (size of q) + (size of pre- and postfix) = 256 + 411 < 1024
		 */
		this.PRIVATE_KEY_ONE_TIME_PAD_SIZE_UNIVOTE_1 = 1024;

		/**
		 * Cryptographic parameters.
		 *
		 * -> Base refers only to the bigInt representation of the settings listed below
		 */
		this.BASE = 10;
		
		/**
		 * UniVote Board setting: p, q and g for Schnorr signature.
		 */
		this.BOARD_SETTING = {
			P: "178011905478542266528237562450159990145232156369120674273274450314442865788737020770612695252123463079567156784778466449970650770920727857050009668388144034129745221171818506047231150039301079959358067395348717066319802262019714966524135060945913707594956514672855690606794135837542707371727429551343320695239",
			Q: "864205495604807476120572616017955259175325408501",
			G: "174068207532402095185811980123523436538604490794561350978495831040599953488455823147851597408940950725307797094915759492368300574252438761037084473467180148876118103083043754985190983472601550494691329488083395492313850000361646482644608492304078721818959999056496097769368017749273708962006689187956744210730",
			PK: "66958355597810698489471425362307177643942027542459889847139582549668126282135390777783858460746726000662328230820010568386790445146483265529575179386210607141523872577665302631137940868775056108711129683088056561604904097738690582247866539343707184146771244022706478825219472668923353222121740341182394461614"
		}
		
		/**
		 * EC setting: p, q and g for Schnorr signature.
		 */
		this.EC_SETTING = {
			P: "178011905478542266528237562450159990145232156369120674273274450314442865788737020770612695252123463079567156784778466449970650770920727857050009668388144034129745221171818506047231150039301079959358067395348717066319802262019714966524135060945913707594956514672855690606794135837542707371727429551343320695239",
			Q: "864205495604807476120572616017955259175325408501",
			G: "174068207532402095185811980123523436538604490794561350978495831040599953488455823147851597408940950725307797094915759492368300574252438761037084473467180148876118103083043754985190983472601550494691329488083395492313850000361646482644608492304078721818959999056496097769368017749273708962006689187956744210730",
			PK: "56046417983892736553802144126938027620541527748149798291772741324585401896629333631946067035048636852193599009683854669888084829275709016527803283969382064059277595434720007311044291973015468412076193860820267069585136814954876118357235567344941207775471304204747723868227800093861417983672494051114178304212"
		}
		
		/**
		 * To prevent script timeouts the havy computations can be run asynchronously.
		 * This is mainly used for IE < 9, but is also a nice feature for all other
		 * browsers as the user get a feedback about the process of the computations.
		 */
		this.COMPUTE_ASYNCHRONOUSLY		= false;

		/**
		 * The secret key can be uploaded by file or manually through copy/paste.
		 * Whether or not the file upload is displayed depends on the html5 support
		 * of the browser. But this feature makes only sense if the secret key is
		 * retreived by file download. Otherwise use this flag to force the
		 * manually upload always.
		 */
		this.UPLOAD_SK_MANUALLY_ALWAYS	= true;


	}
	window.uvConfig = new Config();

})(window);
